<apex:page showHeader="false" standardStylesheets="false" standardController="AddressDetail__c" sidebar="false"
           applyHtmlTag="false" applyBodyTag="false" docType="html-5.0" extensions="CtrCreateNewAddress">


    <html xmlns="http://www.w3.org/2000/svg"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:v-once="http://vue/fake"
          xmlns:v-html="http://vue/fake"
          xmlns:v-bind="http://vue/fake"
          xmlns:v-if="http://vue/fake"
          xmlns:v-on="http://vue/fake"
          xmlns:v-model="http://vue/fake"
          xmlns:v-cloak="http://vue/fake">
    <head>
        <title></title>
        <link rel="stylesheet" type="text/css"
              href="{!URLFOR($Resource.slds231, 'assets/styles/salesforce-lightning-design-system-vf.css')}"/>
        <style type="text/css">
		[v-cloak] {
			display: none !important;
		}
        </style>
    </head>
    <body>

    <div id="app" class="slds" v-cloak="">

        <!-- PAGE HEADER -->
        <div class="slds-page-header">
            <div class="slds-media">
                <div class="slds-media__figure">
				<span class="slds-icon_container slds-icon-standard-address">
						<svg class="slds-icon" aria-hidden="true">
							<use
                                 xlink:href="{!URLFOR($Resource.slds231, '/assets/icons/standard-sprite/svg/symbols.svg#address')}"></use>
						</svg>
					</span>
                </div>
                <div class="slds-media__body">
                    <h1 class="slds-page-header__title slds-truncate slds-align-middle">{!$ObjectType.AddressDetail__c.Label}</h1>
                    <p class="slds-text-body_small slds-line-height_reset">{!IF(ISBLANK(AddressDetail__c.Id), 'New Address', AddressDetail__c.Name)}</p>
                </div>
                <div class="slds-button-group" role="group">
                    <button type="button" class="slds-button slds-button--neutral" v-on:click="cancel">Cancel</button>
                    <button type="button" class="slds-button slds-button--neutral" v-on:click="saveAddress">Save
                    </button>
                </div>
            </div>
        </div>

        <!-- XAL ADDRESS FORM -->
        <div v-if="addressFormModel == 'xal'" class="slds-tabs--scoped">
            <ul class="slds-tabs--scoped__nav" role="tablist">
                <li class="slds-tabs--scoped__item"
                    title="Address details"
                    role="presentation"
                    v-bind:class="{'slds-active': activeTab == 1}">
                    <a class="slds-tabs--scoped__link"
                       href="#"
                       role="tab"
                       tabindex="0"
                       aria-controls="tab-scoped-1"
                       id="tab-scoped-1__item"
                       v-bind:aria-selected="activeTab == 1"
                       v-on:click.prevent="setActiveTab(1)">
                        Address details
                    </a>
                </li>
                <li class="slds-tabs--scoped__item"
                    title="Map"
                    role="presentation"
                    v-bind:class="{'slds-active': activeTab == 2}">
                    <a class="slds-tabs--scoped__link"
                       href="#"
                       role="tab"
                       tabindex="-1"
                       aria-controls="tab-scoped-2"
                       id="tab-scoped-2__item"
                       v-bind:aria-selected="activeTab == 2"
                       v-on:click.prevent="setActiveTab(2)">
                        Map
                    </a>
                </li>
            </ul>
            <div id="tab-scoped-1" class="slds-tabs--scoped__content"
                 v-bind:class="[ activeTab == 1 ? 'slds-show' : 'slds-hide' ]" role="tabpanel"
                 aria-labelledby="tab-scoped-1__item">
                <address-form v-bind:address-detail="addressDetail" v-bind:countries="countries"></address-form>
            </div>
            <div id="tab-scoped-2" class="slds-tabs--scoped__content"
                 v-bind:class="[ activeTab == 2 ? 'slds-show' : 'slds-hide' ]" role="tabpanel"
                 aria-labelledby="tab-scoped-2__item">
                <geolocation v-if="activeTab == 2" v-bind:lat="addressDetail.latitude"
                             v-bind:lng="addressDetail.longitude" v-on:coords="onCoordsChange"></geolocation>
            </div>
        </div>

        <!-- GOOGLE PLACE API ADDRESS FORM -->
        <div v-else-if="addressFormModel == 'gpa'">

        </div>

        <spinner v-bind:open="loaderState.state.isLoading"></spinner>
        <error-handler
                v-bind:message="errorState.state.message"
                v-bind:type="errorState.state.type"
                v-bind:timeout="errorState.state.timeout"
                v-bind:callback="errorState.state.callback"
                v-on:closed="errorState.clearErrorMsg()">
        </error-handler>
    </div>

    <script src="/support/console/38.0/integration.js" type="text/javascript"></script>
    <script src="{!URLFOR($Resource.DHHConsoleToolkit, 'js/ConsoleToolkit.js')}" type="text/javascript"></script>
    <script src="https://maps.googleapis.com/maps/api/js?client=gme-deliveryheroholding&channel=salesforcephoenix&libraries=places"></script>
    <!--<script src="{!URLFOR($Resource.Vue)}"></script>-->
    <script src="https://unpkg.com/vue/dist/vue.js"></script>
    <c:VueCommonComponents />
    <c:VueAddressDetailComponents />
    <script type="text/javascript">

		var root = new Vue({
			el: "#app",
			data: {
				activeTab: 1,
				consoleTool: new DHHConsoleToolkit(),
	            loaderState: loaderSharedState,
	            errorState: errorHandlerSharedState,
	            inputElementsState: inputElementsSharedState,
	            addressFormModel: "",
	            countries: [],
				addressDetail: {}
			},
			methods: {
			    setAddressFormModel: function(accountRecordType) {
			        if (["Talabat_Account"].indexOf(accountRecordType) > -1) {
			            this.addressFormModel = "xal"; // xAL address model
                    } else {
                        this.addressFormModel = "gpa"; // Google Place Api
                    }
                },
				setActiveTab: function(tabIdx) {
					this.activeTab = tabIdx;
				},
				validateForm: function() {
					var isValid = true;

					for (var i = 0; i < this.inputElementsState.state.elements.length; i++) {
						var el = this.inputElementsState.state.elements[i];
						if (!el.isFilled) {
							el.isInError = true;
							isValid = false;
						} else {
							el.isInError = false; // clear the error message if any
						}
					}

					return isValid;
				},
				cancel: function() {
					if (this.consoleTool.inConsole()) {
						this.consoleTool.closeCurrentTab();
					} else {
						history.back();
					}
				},
				saveAddress: function() {
					if (!this.validateForm()) {
						this.errorState.setErrorMsg({
							msg: "Plase fill all required fields",
							type: "error"
						});

						this.activeTab = 1;
						return;
					}

					this.loaderState.startLoadingSpinner();
					
					var self = this;
					// Remote action
					Visualforce.remoting.Manager.invokeAction(
						'{!$RemoteAction.CtrCreateNewAddress.saveAddress}',
						this.addressDetail,
						function (result, event) {
							self.loaderState.stopLoadingSpinner();

							// Checks event status
							if (!event.status || !result) {
								self.errorState.setErrorMsg({
									msg :"Impossible to save address. Error details: " + event.message,
									type: "error"
								});
								return;
							}

			                if (self.consoleTool.inConsole()) {
			                    self.consoleTool.openPrimaryTab("/".concat(result.account), "", function(err, tabId) {
			                        if (err) return;
			                        self.consoleTool.overrideSubTab(tabId, "/".concat(result.id), "");
			                    });
			                } else if (sforce.one) {
			                	sforce.one.navigateToSObject(result.id);
			                } else {
			                	window.location.href = "/".concat(result.id);
			                }

							
						}, {
							escape: false
						} 
					);
				},
				onCoordsChange: function(coords) {
					this.addressDetail.latitude = coords.lat;
					this.addressDetail.longitude = coords.lng;
				}
			},
			created: function() {
				this.loaderState.startLoadingSpinner();

				var self = this;

				// load country picklist
				Visualforce.remoting.Manager.invokeAction(
					'{!$RemoteAction.CtrCreateNewAddress.getCountryByAccountCountryLabel}',
					'{!AddressDetail__c.Account__c}',
					function (result, event) {
						self.loaderState.stopLoadingSpinner();

						// Checks event status
			            if (!event.status) {
			                self.errorState.setErrorMsg({
			                    msg: "Impossible to load Address, error details are: " + event.message,
			                    type: "error"
			                });
			                return;
			            }

						if (!result) {
						    console.log("Result is empty");
						    return;
                        }

						self.countries.push(result);

						if (!"{!AddressDetail__c.Id}") {
							// if new address force the country value
							self.addressDetail = {
								country: result,
								account: "{!AddressDetail__c.Account__c}"
							};
						}
					}, {
						escape: false
					} 
				);

                // load address record
		        if ("{!AddressDetail__c.Id}") {

		            this.loaderState.startLoadingSpinner();
		            this.setAddressFormModel("{!AddressDetail__c.Account__r.RecordType.DeveloperName}");

		            Visualforce.remoting.Manager.invokeAction(
		                '{!$RemoteAction.CtrCreateNewAddress.getAddressDetails}',
		                "{!AddressDetail__c.Id}",
		                function (result, event) {
		                    self.loaderState.stopLoadingSpinner();

		                    // Checks event status
		                    if (!event.status || !result) {
		                        self.errorState.setErrorMsg({
		                        	msg: "Impossible to load Address, error details are: " + event.message,
		                        	type: "error"
		                        });
		                        return;
		                    }

		                    self.addressDetail = result;

		                    // checks if we are cloning
		                    if ("{!JSENCODE($CurrentPage.parameters.clone)}" == 1) {
		                    	self.addressDetail.id = "";
		                    }
		                }, {
		                    escape: false
		                }
		            );
		        } else {
		            this.loaderState.startLoadingSpinner();
		            // load account record type
                    Visualforce.remoting.Manager.invokeAction(
                        "{!$RemoteAction.CtrCreateNewAddress.getAccountRecordType}",
                        "{!AddressDetail__c.Account__c}",
                        function(result, event) {
                            self.loaderState.stopLoadingSpinner();

                            // Checks event
                            if (!event.status) {
                                self.errorState.setErrorMsg({
                                    msg: "Impossible to identify the address type. Error details are: " + event.message,
                                    type: "error"
                                });
                            }

                            self.setAddressFormModel(result);
                        }
                    );
                }
			}
		});

		Visualforce.remoting.timeout = 120000;

		window.addEventListener("load", function() {

			// try to set tab title
			if (sforce.console.isInConsole()) {
				var title = "{!AddressDetail__c.Id}" ? "{!AddressDetail__c.Name}" : "New Address";
				sforce.console.setTabTitle(title);
			}

		});




    </script>

    </body>
    </html>

</apex:page>