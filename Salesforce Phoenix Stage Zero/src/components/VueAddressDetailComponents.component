<apex:component layout="none" controller="CtrCreateNewAddress">
	
	

	<script type="text/javascript">
		var loaderSharedState = {
			state: {
				isLoading: 0
			},
			startLoadingSpinner: function() {
				this.state.isLoading++;
			},
			stopLoadingSpinner: function() {
				if (this.state.isLoading > 0) {
					this.state.isLoading--;
				}
			}
		};

		var errorHandlerSharedState = {
			state: {
				message: "",
				type: "",
				timeout: undefined,
				callback: undefined
			},
			setErrorMsg: function(err) {
				this.state.message = err.msg;
				this.state.type = err.type;
				this.state.timeout = err.timeout;
				this.state.callback = err.callback;
			},
			clearErrorMsg: function() {
				this.state.message = "";
				this.state.type = "";
				this.state.timeout = undefined;
				this.state.callback = undefined;
			}
		};

		var inputElementsSharedState = {
			state: {
				elements: []
			},
			addElement: function(el) {
				this.state.elements.push(el);
			},
			removeElement: function(el) {
				var idx = this.state.elements.indexOf(el);
				if (idx > -1) {
					this.state.elements.splice(idx, 1);
				}
			}
		};

		var xALEntityMixin = {
			props: ["records"],
			data: function() {
				return {
					errorState: errorHandlerSharedState,
					loaderState: loaderSharedState
				};
			},
			computed: {
				types: function() {
					return this.records.reduce(function (acc, record) {
						if (acc.indexOf(record.type) < 0) {
							acc.push(record.type);
						}
						return acc;
					}, []);
				},
				typeSelectionNeeded: function() {
					return this.types.length > 1;
				}
			},
			methods: {
				parseRecordsAsOptions: function(selected, type) {
					return this.records.filter(function (record) {
						return !type || record.type == type;
					}).map(function (record) {
						return {
							value: JSON.parse(JSON.stringify(record)),
							label: record.label,
							selected: (record.developerName == selected)
						};
					});
				},
		        getSelectedEntity: function(selected) {
		            var res = {};

		            // get record selected from records
		            this.records.map(function(record) {
		                if (record.developerName == selected.developerName) {
		                    res = JSON.parse(JSON.stringify(record));
		                    for (var prop in selected) {
		                        if (selected.hasOwnProperty(prop)) {
		                            res[prop] = selected[prop];
		                        }
		                    }
		                }
		            });

		            return res;
		        }
		    }
		};

		var inputMixin = {
			data: function() {
				return {
					isFilled: false,
					isInError: false,
					inputElementsState: inputElementsSharedState
				};
			},
			created: function() {
				this.inputElementsState.addElement(this);
			},
			destroyed: function() {
				this.inputElementsState.removeElement(this);
			}
		};

		Vue.component("checkbox-button", {
			props: ["value", "name", "masterValues"],
			methods: {
				onChange: function() {
					this.$emit("changed", this.value.value, !(this.isChecked > -1));
				}
			},
			computed: {
				isChecked: function() {
					return this.masterValues.indexOf(this.value.value);
				}
			},
			template: `<span class="slds-button slds-checkbox--button">
				        <input type="checkbox" v-bind:name="name" v-bind:id="name" v-on:change="onChange" v-bind:checked="isChecked > -1" />
				        <label class="slds-checkbox--button__label" v-bind:for="name">
				          <span class="slds-checkbox--faux" style="display: block">{{value.label}}</span>
				        </label>
				      </span>`
		});

		Vue.component("checkbox-button-group", {
			mixins: [inputMixin],
			props: ["options", "label", "name", "selectedValues"],
			created: function() {
				if (this.selectedValues && this.selectedValues.length) {
					this.values = this.selectedValues;
				}
			},
			data: function() {
				return {
					values: []
				}
			},
			methods: {
				onValueChange: function(value, checked) {
					if (!checked) {
						var idx = this.values.indexOf(value);
						if (idx > -1) {
							this.values.splice(idx, 1);
						}
					} else {
						this.values.push(value);
					}
				}
			},
			watch: {
				values: function() {
					this.isFilled = !!this.values.length;
					this.$emit("changed", this.values);
				},
		        selectedValues: function() {
		        	this.values = this.selectedValues;
		        }
			},
			template: `<div class="slds-form-element" v-bind:class="{'slds-has-error': isInError}">
						  <legend class="slds-form-element__legend slds-form-element__label">
						    <abbr class="slds-required" title="required">*</abbr>
						  	{{ label }}
					  	  </legend>
						  <div class="slds-form-element__control">
						    <div class="slds-checkbox--button-group">
						      <checkbox-button v-for="(option, index) in options" v-bind:value="option" v-bind:master-values="values" v-bind:name="name.concat(index)" v-on:changed="onValueChange" />
						    </div>
						    <div class="slds-form-element__help">This field is required</div>
						  </div>
						</div>`
		});

		Vue.component("input-text", {
			mixins: [inputMixin],
			props: ["name", "label", "maxlength", "value"],
			created: function() {
				this.text = this.value || "";
			},
			data: function() {
				return {
					text: ""
				};
			},
			methods: {
				onBlur: function() {
					this.$emit("filled", this.text);
				}
			},
			watch: {
				value: function() {
					this.text = this.value || "";
				},
				text: function() {
					this.isFilled = !!this.text;
				}
			},
			template: `<div class="slds-form-element" v-bind:class="{'slds-has-error': isInError}">
							<label class="slds-form-element__label" v-bind:for="name">
								<abbr class="slds-required" title="required">*</abbr>
								{{ label }}
							</label>
							<div class="slds-form-element__control">
								<textarea 
									class="slds-textarea"
									v-bind:id="name" 
									v-bind:placeholder="label.concat('...')" 
									v-bind:maxlength="maxlength"
									v-model="text"
									v-on:blur="onBlur">
								</textarea>
							</div>
						</div>`
		});

		Vue.component("input-radio", {
		    props: ["name", "value", "id", "checked"],
		    methods: {
		        onClick: function() {
		            this.$emit("clicked", this.value);
		        }
		    },
		    template: `<span class="slds-button slds-radio--button">
							<input v-if="checked" type="radio" v-bind:name="name" v-bind:id="id" checked="checked" />
							<input v-else type="radio" v-bind:name="name" v-bind:id="id" />
							<label class="slds-radio--button__label" v-bind:for="id" v-on:click="onClick">
								<span class="slds-radio--faux">{{ value }}</span>
							</label>
						</span>`
		});

		Vue.component("input-radio-group", {
			mixins: [inputMixin],
			props: ["values", "name", "value"],
			methods: {
				onRadioClicked: function(value) {
					this.isFilled = !!value;
					this.$emit("radio-selected", value);
				}
			},
			watch: {
				value: function() {
					this.isFilled = !!this.value;
				}
			},
			template: `<div class="slds-form-element" v-bind:class="{'slds-has-error': isInError}">
							<legend class="slds-form-element__legend slds-form-element__label">
								<abbr class="slds-required" title="required">*</abbr>
								Please pick one between:
							</legend>
							<div class="slds-form-element__control">
								<div class="slds-radio--button-group">
									<input-radio 
										v-for="(val, index) in values" 
										v-bind:name="name" 
										v-bind:id="name + index" 
										v-bind:value="val" 
										v-bind:checked="val == value"
										v-on:clicked="onRadioClicked" />
								</div>
								<div v-if="isInError" class="slds-form-element__help">
									This field is required
								</div>
							</div>
						</div>`
		});

		Vue.component("input-select", {
			mixins: [inputMixin],
			props: ["options", "name", "label", "disabled"],
			created: function() {
				this.setSelectedOption();
			},
			data: function() {
				return {
					selected: undefined
				}
			},
			methods: {
				onSelect: function() {
					this.$emit("selected", this.selected);
				},
				setSelectedOption: function() {
					this.selected = this.options.reduce(function(acc, option) {
		                if (option.selected) {
		                    acc = option.value;
		                }
		                return acc;
		            }, undefined);
				}
			},
		    watch: {
		        options: function() {
		        	/* This is  because when user change an entity's type only
		        	options are updated */
		            this.setSelectedOption();
		        },
		        selected: function() {
		        	this.isFilled = !!this.selected;
		        }
		    },
			template: `<div class="slds-form-element" v-bind:class="{'slds-has-error': isInError}">
							<label class="slds-form-element__label" v-bind:for="name">
								<abbr class="slds-required" title="required">*</abbr>
								{{label}}
							</label>
							<div class="slds-form-element__control">
								<div class="slds-select_container">
									<select 
										v-bind:name="name" 
										v-bind:id="name" 
										v-bind:disabled="!!disabled"
										v-on:change="onSelect"
										v-model="selected"
										class="slds-select">
										<option value=""> --- None --- </option>
										<option v-for="opt in options" v-bind:value="opt.value">
											{{opt.label}}
										</option>
									</select>
								</div>
							</div>
						</div>`
		});

		Vue.component("postal-code", {
			mixins: [xALEntityMixin],
			props: ["postal-code-value"],
			methods: {
				onPostcodeSelected: function (value) {
					this.$emit("postcode-selected", value || {});
				}
			},
			computed: {
				options: function() {
					var postalCodeValue = this.postalCodeValue || {};
					return this.parseRecordsAsOptions(postalCodeValue.developerName);
				}
			},
			template: `<input-select v-bind:options="options" name="postalCode" label="Postal Code" v-on:selected="onPostcodeSelected"></input-select>`
		});

		Vue.component("locality", {
			mixins: [xALEntityMixin],
			props: ["level", "locality-value"],
			data: function() {
				return {
					type: "",
					hideDependentLocalities: false,
					hidePostalCodes: false,
					locality: {
						dependentLocalities: [],
						postalCodes: []
					}
				}
			},
			created: function() {
				if (this.localityValue) {
					this.type = this.localityValue.type;
					this.locality = this.getSelectedEntity(this.localityValue);
					this.hideDependentLocalities = (!!this.locality.postalCode);
					this.hidePostalCodes = (!!this.locality.dependentLocality);
				}
			},
			methods:{
				onTypeSelected: function(value) {
					this.locality = this.emptyLocality();
					this.hideDependentLocalities = false;
					this.hidePostalCodes = false;
					this.type = value;
				},
				onLocalitySelected: function(value) {
					if (!value) {
		            	this.locality = this.emptyLocality();
		            	return;
					}

					// load locality with dependencies
					this.loaderState.startLoadingSpinner();

		            var self = this;
		            // Remote action
		            Visualforce.remoting.Manager.invokeAction(
		                '{!$RemoteAction.CtrCreateNewAddress.getLocalityByName}',
		                value.developerName,
		                function(result, event) {
		                    self.loaderState.stopLoadingSpinner();

		                    // Checks event status
		                    if (!event.status || !result) {
		                        self.errorState.setErrorMsg({
		                            msg: "Impossible to load Localities, please try again. Error details: " + event.message,
		                            type: "error"
		                        });
		                        return;
		                    }

		                    self.locality = result;
		                }, {
		                    escape: false
		                }
		            );
				},
				onDependentLocalitySelected: function(value) {
					if (value.developerName) { // valid dependent locality
						this.locality.dependentLocality = value;

						// remove postal code if any
						delete this.locality.postalCode;
						this.hidePostalCodes = true;
					} else {
						delete this.locality.dependentLocality;
						this.hidePostalCodes = false;
					}
				},
				onPostcodeSelected: function(value) {
					if (value.developerName) { // valid postal code
						this.locality.postalCode = value;

						// remove dependentLocality if any
						delete this.locality.dependentLocality;
						this.hideDependentLocalities = true;
					} else {
						delete this.locality.postalCode;
						this.hideDependentLocalities = false;
					}
				},
		        emptyLocality: function() {
		            return {
		                parentLocality: this.locality.parentLocality, // it's important in case of blank value to set correctly the parentLocality property
		                dependentLocalities: [],
		                postalCodes: []
		            }
		        }
			},
			watch: {
				locality: {
					handler: function(val, oldVal) {
		                var evtName = this.locality.parentLocality ? "child-locality-selected" : "root-locality-selected";
						this.$emit(evtName, this.locality);
					},
					deep: true
				}
			},
			computed: {
				typeRadioGroupName: function() {
					return "localityType".concat(this.level);
				},
				localitySelectName: function() {
					return "localityName".concat(this.level);
				},
				localitiesByType: function() {
					if (!this.typeSelectionNeeded) {
						this.type = this.types[0];
					}
		            return this.parseRecordsAsOptions(this.locality.developerName, this.type);
				}
			},
			template: `<div>
							<input-radio-group 
								v-if="typeSelectionNeeded" 
								v-bind:values="types" 
								v-bind:name="typeRadioGroupName" 
								v-bind:value="type"
								v-on:radio-selected="onTypeSelected">
							</input-radio-group>

							<input-select 
								v-if="localitiesByType.length" 
								v-bind:options="localitiesByType" 
								v-bind:name="localitySelectName"
								v-bind:label="type"
								v-on:selected="onLocalitySelected">
							</input-select>

							<locality 
								v-if="!hideDependentLocalities && locality.dependentLocalities.length" 
								v-bind:records="locality.dependentLocalities" 
								v-bind:locality-value="locality.dependentLocality"
								v-bind:level="level + 1"
								v-on:child-locality-selected="onDependentLocalitySelected">
							</locality>

							<postal-code 
								v-if="!hidePostalCodes && locality.postalCodes.length"
								v-bind:records="locality.postalCodes"
								v-bind:postal-code-value="locality.postalCode"
								v-on:postcode-selected="onPostcodeSelected">
							</postal-code>
							
						</div>`
		});

		Vue.component("sub-administrative-area", {
			mixins: [xALEntityMixin],
			props: ["sub-area-value"],
			data: function() {
				return {
					hidePostalCodes: false,
					hideLocalities: false,
					type: "",
					subArea: {
						localities: [],
						postalCodes: []
					}
				}
			},
			created: function () {
				if (this.subAreaValue)	 {
					this.type = this.subAreaValue.type;
					this.subArea = this.getSelectedEntity(this.subAreaValue);
					this.hidePostalCodes = (!!this.subArea.locality);
					this.hideLocalities = (!!this.subArea.postalCode);
				}
			},
			methods: {
				onTypeSelected: function(value) {
					this.subArea = this.emptySubArea();
					this.hidePostalCodes = false;
					this.hideLocalities = false;
					this.type = value;
				},
				onSubAreaSelected: function(value) {
					if (!value) {
						this.subArea = this.emptySubArea();
						return;
					}

					// load sub area with dependencies
					this.loaderState.startLoadingSpinner();

		            var self = this;
		            // Remote action
		            Visualforce.remoting.Manager.invokeAction(
		                '{!$RemoteAction.CtrCreateNewAddress.getSubAdminAreaByName}',
		                value.developerName,
		                function(result, event) {
		                    self.loaderState.stopLoadingSpinner();

		                    // Checks event status
		                    if (!event.status || !result) {
		                        self.errorState.setErrorMsg({
		                            msg: "Impossible to load Sub-Administrative Areas, please retry. Error details: " + event.message,
		                            type: "error"
		                        });
		                        return;
		                    }

		                    self.subArea = result;
		                }, {
		                    escape: false
		                }
		            );
				},
				onLocalitySelected: function(value) {
					if (value.developerName) {
						// valid locality
						this.subArea.locality = value;

						// clear postal code if any
						this.hidePostalCodes = true;
						delete this.subArea.postalCode;
					} else {
						// not a valid locality
						delete this.subArea.locality;
						this.hidePostalCodes = false;
					}
				},
				onPostcodeSelected: function(value) {
					if (value.developerName) { // valid postal code
						this.subArea.postalCode = value;

						// clear locality if any
						this.hideLocalities = true;
						delete this.subArea.locality;
					} else {
						delete this.subArea.postalCode;
						this.hideLocalities = false;
					}
				},
				emptySubArea: function() {
					return {
						localities: [],
						postalCodes: []
					}
				}
			},
			watch: {
				subArea: {
					handler: function() {
						this.$emit("sub-area-selected", this.subArea);
					},
					deep: true
				}
			},
			computed: {
				subAreasByType: function() {
					if (!this.typeSelectionNeeded) {
						this.type = this.types[0];
					}
					return this.parseRecordsAsOptions(this.subArea.developerName, this.type);
				}
			},
			template: `<div>
							<input-radio-group
								v-if="typeSelectionNeeded"
								v-bind:values="types"
								v-bind:value="type"
								name="subAdministrativeAreaType"
								v-on:radio-selected="onTypeSelected">
							</input-radio-group>

							<input-select
								v-if="subAreasByType.length"
								v-bind:options="subAreasByType"
								name="subAreaSelectName"
								v-bind:label="type"
								v-on:selected="onSubAreaSelected">
							</input-select>

							<locality
								v-if="!hideLocalities && subArea.localities.length"
								v-bind:records="subArea.localities"
								v-bind:locality-value="subArea.locality"
								level="0"
								v-on:root-locality-selected="onLocalitySelected">
							</locality>

							<postal-code 
								v-if="!hidePostalCodes && subArea.postalCodes.length"
								v-bind:records="subArea.postalCodes"
								v-bind:postalCode="subArea.postalCode"
								v-on:postcode-selected="onPostcodeSelected">
							</postal-code>
						</div>`
		});
		
		Vue.component("administrative-area", {
			mixins: [xALEntityMixin],
		    props: ["admin-area-value"],
		    data: function() {
		        return {
		            type: "",
		            hideLocalities: false,
		            hidePostalCodes: false,
		            hideSubAreas: false,
		            adminArea: {
		                localities: [],
		                postalCodes: [],
		                subAdministrativeAreas: []
		            }
		        }
		    },
		    created: function() {
		    	if (this.adminAreaValue) {
		    		this.type = this.adminAreaValue.type;
		    		this.adminArea = this.getSelectedEntity(this.adminAreaValue);
		   			this.hideLocalities = (!!this.adminArea.postalCode || !!this.adminArea.subAdministrativeArea);
					this.hidePostalCodes = (!!this.adminArea.locality || !!this.adminArea.subAdministrativeArea);
					this.hideSubAreas = (!!this.adminArea.locality || !!this.adminArea.postalCode);
		    	}
		    },
		    methods: {
		    	onTypeSelected: function(value) {
		    		this.adminArea = this.emptyAdminArea();
		    		this.hideLocalities = false;
		    		this.hidePostalCodes = false;
		    		this.hideSubAreas = false;
		    		this.type = value;
		    	},
		    	onAdminAreaSelected: function(value) {
		    		if (!value) {
		    			this.adminArea = this.emptyAdminArea();	
		    			return;
		    		}

		    		// load admin area with dependencies
		    		this.loaderState.startLoadingSpinner();

		            var self = this;
		            // Remote action
		            Visualforce.remoting.Manager.invokeAction(
		                '{!$RemoteAction.CtrCreateNewAddress.getAdminAreaByName}',
		                value.developerName,
		                function(result, event) {
		                    self.loaderState.stopLoadingSpinner();

		                    // Checks event status
		                    if (!event.status || !result) {
		                        self.errorState.setErrorMsg({
		                            msg: "Impossible to load Administrative areas, please retry. Error details: " + event.message,
		                            type: "error"
		                        });
		                        return;
		                    }

		                    self.adminArea = result;
		                }, {
		                    escape: false
		                }
		            );
		    	},
		    	onLocalitySelected: function(value) {
		    		if (value.developerName) {
		    			// valid locality
		    			this.adminArea.locality = value;

		    			// clear postal code and sub administrative area if any
		    			delete this.adminArea.postalCode;
		    			delete this.adminArea.subAdministrativeArea;
		    			this.hidePostalCodes = true;
		    			this.hideSubAreas = true;
		    		} else {
		    			delete this.adminArea.locality;
		    			this.hidePostalCodes = false;
		    			this.hideSubAreas = false;
		    		}
		    	},
		    	onSubAreaSelected: function(value) {
		    		if (value.developerName) {
		    			// valid sub area
		    			this.adminArea.subAdministrativeArea = value;

		    			// clear locality and postal code if any
		    			delete this.adminArea.locality;
		    			delete this.adminArea.postalCode;
		    			this.hidePostalCodes = true;
		    			this.hideLocalities = true;
		    		} else {
		    			delete this.adminArea.subAdministrativeArea;
		    			this.hidePostalCodes = false;
						this.hideLocalities = false;
		    		}
		    	},
		    	onPostcodeSelected: function(value) {
		    		if (value.developerName) {
		    			// valid postal code
		    			this.adminArea.postalCode = value;

		    			// clear locality and sub administrative area if any
		    			delete this.adminArea.subAdministrativeArea;
		    			delete this.adminArea.locality;
		    			this.hideSubAreas = true;
		    			this.hideLocalities = true;
		    		} else {
		    			delete this.adminArea.postalCode;
		    			this.hideSubAreas = false;
		    			this.hideLocalities = false;
		    		}
		    	},
		    	emptyAdminArea: function() {
		    		return {
		    			localities: [],
		                postalCodes: [],
		                subAdministrativeAreas: []
		    		};
		    	}
		    },
		    watch: {
		    	adminArea: {
		    		handler: function() {
		    			this.$emit("admin-area-selected", this.adminArea);
		    		},
		    		deep: true
		    	}
		    },
		    computed: {
		    	adminAreasByType: function() {
		    		if (!this.typeSelectionNeeded) {
		    			this.type = this.types[0];
		    		}
		    		return this.parseRecordsAsOptions(this.adminArea.developerName, this.type);
		    	}
		    },
		    template: `<div>
		    				<input-radio-group
		    					v-if="typeSelectionNeeded"
		    					v-bind:values="types"
		    					v-bind:value="type"
		    					name="administrativeAreaType"
		    					v-on:radio-selected="onTypeSelected">
	    					</input-radio-group>

	    					<input-select
	    						v-if="adminAreasByType.length"
	    						v-bind:options="adminAreasByType"
	    						name="adminAreaSelectName"
	    						v-bind:label="type"
	    						v-on:selected="onAdminAreaSelected">
    						</input-select>

    						<sub-administrative-area
    							v-if="!hideSubAreas && adminArea.subAdministrativeAreas.length"
    							v-bind:records="adminArea.subAdministrativeAreas"
    							v-bind:sub-area-value="adminArea.subAdministrativeArea"
    							v-on:sub-area-selected="onSubAreaSelected">
							</sub-administrative-area>

    						<locality
    							v-if="!hideLocalities && adminArea.localities.length"
    							v-bind:records="adminArea.localities"
    							v-bind:locality-value="adminArea.locality"
    							level="0"
    							v-on:root-locality-selected="onLocalitySelected">
							</locality>

							<postal-code
								v-if="!hidePostalCodes && adminArea.postalCodes.length"
								v-bind:records="adminArea.postalCodes"
								v-bind:postal-code-value="adminArea.postalCode"
								v-on:postcode-selected="onPostcodeSelected">
							</postal-code>
		    			</div>`
		});

		Vue.component("country", {
			mixins: [xALEntityMixin],
			props: ["country-value"],
			data: function () {
				return {
					country: {
						adminAreas: []
					}
				};
			},
			created: function() {
				if (this.countryValue) {
					this.country = this.getSelectedEntity(this.countryValue);
				}
			},
			methods: {
				onCountrySelected: function(value) {
					if (!value) {
						this.country = {adminAreas: []}; // empty country
						return;
					}
		            
		            // load selected country with dependencies
		            this.loaderState.startLoadingSpinner();

		            var self = this;
		            // Remote action
		            Visualforce.remoting.Manager.invokeAction(
		                '{!$RemoteAction.CtrCreateNewAddress.getCountryByName}',
		                value.developerName,
		                function(result, event) {
		                    self.loaderState.stopLoadingSpinner();

		                    // Checks event status
		                    if (!event.status || !result) {
		                        self.errorState.setErrorMsg({
		                            msg: "Impossible to load selected country, please retry. Error details: " + event.message,
		                            type: "error"
		                        });
		                        return;
		                    }

		                    self.country = result;
		                }, {
		                    escape: false
		                }
		            );
				},
				onAdminAreaSelected: function(value) {
					if (value.developerName) {
						// valid admin area
						this.country.adminArea = value;
					} else {
						delete this.country.adminArea;
					}
				}
			},
			computed: {
				countries: function() {
					return this.parseRecordsAsOptions(this.country.developerName);
				}
			},
			watch: {
				country: {
					handler: function() {
						this.$emit("country-selected", this.country);
					},
					deep: true
				}
			},
			template: `<div>
							<input-select
								name="countrySelectName"
								v-bind:options="countries"
								label="Country"
								disabled="1"
								v-on:selected="onCountrySelected">
							</input-select>

							<administrative-area
								v-if="country.adminAreas.length"
								v-bind:records="country.adminAreas"
								v-bind:admin-area-value="country.adminArea"
								v-on:admin-area-selected="onAdminAreaSelected">
							</administrative-area>
						</div>`
		});

		Vue.component("address-form", {
			props: ["addressDetail", "countries"],
			data: function() {
				return {
		            addressTypes: [{
		                value: "Restaurant Address",
		                label: "Restaurant Address"
		            }, {
		                value: "Shipping Address",
		                label: "Shipping Address"
		            }, {
		                value: "Billing Address",
		                label: "Billing Address"
		            }]
				};
			},
			methods: {
				onCountrySelected: function(value) {
		            if (value.developerName) {
		                this.addressDetail.country = value;
		            } else {
		                delete this.addressDetail.country;
		            }
		        },
		        onAddressTypeSelected: function(value) {
		        	this.addressDetail.type = value;
		        },
		        onAddressLineFilled: function(text) {
		        	this.addressDetail.addressLine = text;
		        }
			},
			template: `<div v-if="addressDetail" class="slds-grid slds-box">
						<div class="slds-col">
							<div class="slds-form slds-form_stacked">
								<checkbox-button-group v-bind:options="addressTypes" v-bind:selected-values="addressDetail.type" label="Address type" name="addressType" v-on:changed="onAddressTypeSelected" />
								<country v-if="countries.length" v-bind:records="countries" v-bind:country-value="addressDetail.country" v-on:country-selected="onCountrySelected" />
								<input-text name="addressLine" label="Address Line" maxlength="255" v-bind:value="addressDetail.addressLine" v-on:filled="onAddressLineFilled" />
							</div>
						</div>
					</div>`
		});

		Vue.component("geolocation", {
			props: ["lat", "lng"],
			data: function() {
				return {
					mapId: "vueAddrFormMap",
					searchBoxId: "searchBox",
					marker: undefined,
					map: undefined,
					infoWindow: undefined,
					searchBox: undefined,
					geoOptions: {
						enableHighAccuracy: true,
					    maximumAge: 0,
	    				timeout: 60000
					},
					loaderState: loaderSharedState,
					errorState: errorHandlerSharedState,
					pos: {
						lat: null,
						lng: null
					}
				};
			},
			mounted: function() {
				this.initMap();

				if (this.lat && this.lng) {
					this.pos = {
						lat: this.lat,
						lng: this.lng
					};
				
					this.drawMarker();
				}

				if (!this.hasGeolocation) {
					// location services are not enable
					this.setErrorMsg({
						msg: "This device do not support geolocation services. You won't be able to locate the restaurant",
						type: "error"
					});	
				}
			},
			computed: {
				hasGeolocation: function() {
					return ("geolocation" in navigator);
				}
			},
			watch: {
				pos: function() {
					this.$emit("coords", this.pos);
					this.drawMarker();
				}
			},
			methods: {
				clearPosition: function() {
					this.pos = {
						lat: null,
						lng: null
					};
				},
				initMap: function() {
					var mapDiv = document.getElementById(this.mapId);
					var mapHeight = Math.max(
						Math.abs(window.innerHeight - document.body.getBoundingClientRect().height), 
						400
					);
					mapDiv.style["height"] = mapHeight + "px";

		            this.map = new google.maps.Map(mapDiv, {
		                center: {
		                	lat: 52.524818,
		                	lng: 13.393072 // DHH Berlin HQ
		                },
		                zoom: 18
		            });

		            // init search box
		            var self = this;
		            this.searchBox = new google.maps.places.SearchBox(
		            	document.getElementById(this.searchBoxId)
	            	);

	            	this.searchBox.addListener("places_changed", function() {
	            		var places = self.searchBox.getPlaces();

	            		if (!places.length) {
	            			return; // no places
	            		}

	            		// get location of first place
	            		self.pos = {
	            			lat: places[0].geometry.location.lat(),
	            			lng: places[0].geometry.location.lng()
	            		};
	            	});
				},
				findMe: function() {	
					var self = this;

					this.loaderState.startLoadingSpinner();

		            navigator.geolocation.getCurrentPosition(
		                function success(position) {
		                	self.loaderState.stopLoadingSpinner();

		                	self.pos = {
		                		lat: position.coords.latitude,
		                		lng: position.coords.longitude
		                	};
		                },
		                function error(err) {
		                	self.loaderState.stopLoadingSpinner();
		                	
		                	switch(err.code) {
		                		case err.PERMISSION_DENIED:
		                			self.errorState.setErrorMsg({
		                				msg: "GPS location is deactivated. Please make sure you enabled it.",
		                				type: "warning"
		                			});
		                			break;
                				case err.TIMEOUT:
                					// try to increase timeout
                					if (self.geoOptions.timeout < 120000) {
				                        self.errorState.setErrorMsg({
				                            msg: "GPS location will take some more time. Please be patient",
				                            type: "",
				                            timeout: 2500,
				                            callback: function() {
				                                self.findMe();
				                            }
				                        });
				                        self.geoOptions.timeout += 30000; // increment timeout
                					} else {
                						self.errorState.setErrorMsg({
                							msg: "GPS location is taking too long. Maybe try to move to a more open space and retry.",
                							type: "warning"
                						});
                						self.geoOptions.timeout = 60000; // reset time out
                					}
                					break;
            					case err.POSITION_UNAVAILABLE:
            					default:
            						self.errorState.setErrorMsg({
	                					msg: "Oooops! Something went wrong. Please try again.",
	                					type: "warning"
	                				});
            						break;
		                	}

		                }, this.geoOptions);
				},
				drawMarker: function() {
					var self = this;

					// checks position is valid
					if (!this.pos.lat || !this.pos.lng) {
						if (self.marker) {
							self.marker.setMap(null); // remove marker from map
						}
						return;
					}

					if (!self.infoWindow) {
						self.infoWindow = new google.maps.InfoWindow;	
						self.infoWindow.setContent(`<div>
							Location found. If not correct, do one of the following:<br>
							<ul class="slds-p-left--small" style="list-style: square inside">
								<li>Drag and drop this pin into the right spot</li>
								<li>Press "Find Me" button again</li>
							</ul>
						</div>`);
					} 

					if (!self.marker) {
						// init marker for the first time
						self.marker = new google.maps.Marker({
							draggable: true
						});

						self.marker.addListener("drag", function(evt) {
							self.pos.lat = evt.latLng.lat();
							self.pos.lng = evt.latLng.lng();
							// in this way vue don't fire the coords event
						});

						self.marker.addListener("dragend", function(evt) {
							self.pos = {
								lat: evt.latLng.lat(),
								lng: evt.latLng.lng()
							};
							// new object, vue will fire the coords event
						});

						self.marker.addListener("click", function(evt) {
							self.infoWindow.open(self.map, self.marker);
						});

						this.marker = self.marker;
					}

					self.marker.setMap(self.map);
					self.marker.setPosition(self.pos);
					self.map.setCenter(self.pos);
					self.infoWindow.open(self.map, self.marker);
				}
			},
			template: `<div v-if="hasGeolocation" class="slds-grid slds-box slds-wrap">
							<div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-2">
								<div class="slds-form-element">
									<label class="slds-form-element__label" v-bind:for="searchBoxId">Address</label>
									<div class="slds-form-element__control">
										<input type="text" v-bind:id="searchBoxId" class="slds-input" />
									</div>
								</div>
							</div>

							<div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-2 slds-align--absolute-center slds-p-around--small">
								<button type="button" class="slds-button slds-button--stateful slds-button--brand" v-on:click="findMe">
									<svg class="slds-button__icon--left slds-button__icon--stateful" aria-hidden="true">
										<use xlink:href="{!URLFOR($Resource.slds231, '/assets/icons/utility-sprite/svg/symbols.svg#checkin')}"></use>
									</svg>
									Find me!
								</button>
								<span class="slds-m-left--small slds-form-element__label">GPS location could take some minutes</span>
							</div>

							<div class="slds-col slds-size--1-of-1 slds-m-top--small slds-m-bottom--small">
									
								<div v-bind:id="mapId" class="slds-p-around--small" style="width: 100%" />

							</div>

							<div class="slds-col slds-size--6-of-12 slds-medium-size--5-of-12 slds-large-size--5-of-12">
								<div class="slds-form-element">
									<label class="slds-form-element__label" for="lat">Latitude</label>
									<div class="slds-form-element__control">
									<input type="text" readonly id="lat" class="slds-input" v-model="pos.lat"/>
									</div>
								</div>
							</div>

							<div class="slds-col slds-size--6-of-12 slds-medium-size--5-of-12 slds-large-size--5-of-12 slds-p-left--small">
								<div class="slds-form-element">
									<label class="slds-form-element__label" for="lng">Longitude</label>
									<div class="slds-form-element__control">
										<input type="text" readonly id="lng" class="slds-input" v-model="pos.lng"/>
									</div>
								</div>
							</div>

							<div class="slds-col slds-size--12-of-12 slds-medium-size--2-of-12 slds-large-size--2-of-12 slds-p-around--small slds-align--absolute-center">
								<button type="button" class="slds-button slds-button--stateful slds-button--destructive" v-on:click="clearPosition">
									<svg class="slds-button__icon--left slds-button__icon--stateful" aria-hidden="true">
										<use xlink:href="{!URLFOR($Resource.slds231, '/assets/icons/utility-sprite/svg/symbols.svg#clear')}"></use>
									</svg>
									Clear
								</button>
							</div>

						</div>`
		});
	</script>
</apex:component>